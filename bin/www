#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('projectsocket:server');
var http = require('http');
var mysql = require('mysql')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Setup Socket env
 */

var io = require('socket.io')(server, {
  cors: {
    origin: "*"
  }
});
var roomNum = 1;
var usersId = [];
var rooms = [];

io.on('connection', (socket) => {
  socket.on('disconnect', () => {
    console.log('user disconnected');
  });

  socket.on('createId', createId);
  socket.on('createRoom', createRoom);
  socket.on('joinRoom', joinRoom);
  socket.on('getReady', getReady);
  socket.on('leaveRoom', leaveRoom);
  socket.on('refreshRoom',refreshRoom);

  function createId(id) {
    const index = usersId.findIndex((item) => {
      return item == id;
    });
    var isValidId;
    if (index > -1) {
      isValidId = false;
    } else {
      usersId.push(id);
      isValidId = true;
    }
    io.to(socket.id).emit('checkId', isValidId);
  }
  async function createRoom(id, roomTitle) {
    await socket.join(roomNum);
    var clients = io.sockets.adapter.rooms.get(roomNum);
    var clientsNum = clients.size;
    var host = id;
    var guest = "";
    rooms.push([roomNum, roomTitle, host, guest, clientsNum]);
    io.emit('createRoom', rooms);
    roomNum += 1;
  }
  async function joinRoom(id, roomNum) {
    await socket.join(roomNum);
    var clients = io.sockets.adapter.rooms.get(roomNum);
    var clientsNum = clients.size;
    var guest = id;
    const index = rooms.findIndex((item) => {
      return item[0] == roomNum
    });
    rooms[index][3] = guest;
    rooms[index][4] = clientsNum;
    io.emit('joinRoom', roomNum, clientsNum);
  }

  function getReady() {
    const roomNum = [...socket.rooms][1];
    io.sockets.in(roomNum).emit('getReady');
  }

  function leaveRoom(id) {
    const roomNum = [...socket.rooms][1];
    const index = rooms.findIndex((item) => {
      return item[0] == roomNum
    });
    const host = rooms[index][2];
    const guest = rooms[index][3];
    if (id == host) {
      //If there's no guest and only host exists
      if (rooms[index][4] == 1) {
        deleteRoom(roomNum);
      } else {
        rooms[index][2] = guest;
        rooms[index][3] = "";
        rooms[index][4] = 1;
        socket.broadcast.to(roomNum).emit('changeHost');
      }
    } else {
      socket.broadcast.to(roomNum).emit('guestExit');
      rooms[index][3] = "";
      rooms[index][4] = 1;
    }
    io.emit('refreshRoom', rooms);
    socket.leave(roomNum);
  }
  function refreshRoom() {
    io.emit('refreshRoom',rooms);
  }
  function deleteRoom(roomNum) {
    const index = rooms.findIndex((item) => {
      return item[0] == roomNum
    });
    if (index > -1) {
      rooms.splice(index, 1);
    }
    io.emit('refreshRoom', rooms);
  }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}